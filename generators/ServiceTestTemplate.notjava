package cz.muni.fi.gag.web.service;

import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.EmptyAsset;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;

import cz.muni.fi.gag.web.dao.{{tablename}}Dao;
import cz.muni.fi.gag.web.entity.{{tablename}};

import javax.inject.Inject;

import java.util.logging.Logger;

/**
 * @author Vojtech Prusa
 *
 */
 @RunWith(Arquillian.class)
public class {{tablename}}Test extends TestBase {

    private static Logger log = Logger.getLogger({{tablename}}Test.class.getSimpleName());

    @Deployment
    public static WebArchive deployment() {
          return ShrinkWrap.create(WebArchive.class, {{tablename}}Test.class.getSimpleName() + ".war")
                .addPackages(true, "cz.muni.fi.gag.web")
                .addAsResource("test-persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource(EmptyAsset.INSTANCE, "beans.xml");
    }

    @Inject
    private {{tablename}}Dao fignerDataLineDao;

    @Inject
    private {{tablename}}Service {{Ltablename}}Service;

    @Rule
    public ExpectedException expectedException = ExpectedException.none();

    private {{tablename}} test{{tablename}}1;
    private {{tablename}} test{{tablename}}2;

    public {{tablename}} build{{tablename}}() {
        {{tablename}} r = new {{tablename}}();
        //TODO set values ...
        return r;
    }

    @Before
    public void before() {
        test{{tablename}}1 = build{{tablename}}();
        test{{tablename}}2 = build{{tablename}}();
        log.info("Using {{tablename}} test1:");
        log.info(test{{tablename}}1.toString());
        log.info("Using {{tablename}} test2:");
        log.info(test{{tablename}}2.toString());
    }

    @After
    public void after() {
        fignerDataLineDao.findAll().stream().map({{tablename}}::getId).forEach(fignerDataLineDao::remove);
    }

    @Test
    public void testValidCreateThenFind() {
        fignerDataLineDao.create(test{{tablename}}1);
        Assert.assertEquals(test{{tablename}}1, fignerDataLineDao.find(test{{tablename}}1.getId()).get());
    }

    @Test
    public void testServiceValidCreateThenFind() {
        {{Ltablename}}Service.create(test{{tablename}}2);
        Assert.assertEquals(test{{tablename}}2, {{Ltablename}}Service.findById(test{{tablename}}2.getId()).get());
    }

    //@Test
    public void testServiceValidUpdateThenFind() {
      testServiceValidCreateThenFind();
      // TODO ...
    }

}
